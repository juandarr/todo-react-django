/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  List,
  PatchedList,
} from '../models/index';
import {
    ListFromJSON,
    ListToJSON,
    PatchedListFromJSON,
    PatchedListToJSON,
} from '../models/index';

export interface ListsCreateRequest {
    list: List;
}

export interface ListsDestroyRequest {
    id: number;
}

export interface ListsPartialUpdateRequest {
    id: number;
    patchedList?: PatchedList;
}

export interface ListsRetrieveRequest {
    id: number;
}

export interface ListsUpdateRequest {
    id: number;
    list: List;
}

/**
 * 
 */
export class ListsApi extends runtime.BaseAPI {

    /**
     */
    async listsCreateRaw(requestParameters: ListsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<List>> {
        if (requestParameters.list === null || requestParameters.list === undefined) {
            throw new runtime.RequiredError('list','Required parameter requestParameters.list was null or undefined when calling listsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/lists/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListToJSON(requestParameters.list),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFromJSON(jsonValue));
    }

    /**
     */
    async listsCreate(requestParameters: ListsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<List> {
        const response = await this.listsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listsDestroyRaw(requestParameters: ListsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/lists/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async listsDestroy(requestParameters: ListsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async listsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<List>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/lists/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListFromJSON));
    }

    /**
     */
    async listsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<List>> {
        const response = await this.listsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listsPartialUpdateRaw(requestParameters: ListsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<List>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/lists/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedListToJSON(requestParameters.patchedList),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFromJSON(jsonValue));
    }

    /**
     */
    async listsPartialUpdate(requestParameters: ListsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<List> {
        const response = await this.listsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listsRetrieveRaw(requestParameters: ListsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<List>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/lists/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFromJSON(jsonValue));
    }

    /**
     */
    async listsRetrieve(requestParameters: ListsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<List> {
        const response = await this.listsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listsUpdateRaw(requestParameters: ListsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<List>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listsUpdate.');
        }

        if (requestParameters.list === null || requestParameters.list === undefined) {
            throw new runtime.RequiredError('list','Required parameter requestParameters.list was null or undefined when calling listsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/lists/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ListToJSON(requestParameters.list),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFromJSON(jsonValue));
    }

    /**
     */
    async listsUpdate(requestParameters: ListsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<List> {
        const response = await this.listsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
